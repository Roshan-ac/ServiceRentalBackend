//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model Customer {
  id         String   @id() @unique() @default(uuid())
  username   String   @unique()
  firstName  String
  email      String   @unique()
  middleName String?
  lastName   String
  contact    Contact? @relation("customerContact")
  session    Session?
  post       Post[]
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model Freelancer {
  id             String           @id() @unique() @default(uuid())
  username       String           @unique()
  firstName      String
  email          String           @unique()
  middleName     String?
  lastName       String
  contact        Contact?         @relation("FreelancerContact")
  session        Session?
  skills         SkillSet[]
  availibility   Boolean          @default(false)
  description    String?
  hourlyRate     Float?
  workExperience WorkExperience[]
  Avatar         Avatar?
}

model Avatar {
  id           String      @id() @unique() @default(uuid())
  image        String
  freelancerId String?     @unique()
  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id])
}

model Post {
  id              String      @id() @unique() @default(uuid())
  image           String
  caption         String
  description     String
  postedAt        DateTime    @default(now())
  paymentMode     PaymentMode
  requiredSkills  String[]
  location        String
  estimatedTime   Int
  estimatedBudget Float[]
  customerId      String?     @unique()
  customer        Customer?   @relation(fields: [customerId], references: [id])
}

enum PaymentMode {
  HOURLY
  FIXED
}

model Session {
  id           String      @id() @unique() @default(uuid())
  token        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  expireDate   DateTime
  customerId   String?     @unique()
  customer     Customer?   @relation(fields: [customerId], references: [id])
  freelancerId String?     @unique()
  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id])
}

model Contact {
  id             String      @id() @unique() @default(uuid())
  phoneNumber    String[]
  city           String
  state          String
  country        String
  secondaryEmail String
  customerId     String?     @unique()
  Customer       Customer?   @relation("customerContact", fields: [customerId], references: [id])
  freelancerId   String?     @unique()
  freelancer     Freelancer? @relation("FreelancerContact", fields: [freelancerId], references: [id])
}

model WorkExperience {
  id           String      @id() @unique() @default(uuid())
  companyName  String
  joinedDate   DateTime
  endDate      DateTime?
  designation  String
  location     String
  freelancerId String?     @unique()
  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id])
}

model SkillSet {
  id           String      @id() @unique() @default(uuid())
  skillName    String
  freelancerId String?     @unique()
  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id])
}


model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String   @db.VarChar(6)
  sessionId String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([email, createdAt])
}